# Development Dockerfile for tmidb-core
# This file sets up a development environment with all services (DB, NATS, etc.)
# included, similar to the all-in-one production Dockerfile.
# Uses 'air' for live reloading of individual Go applications.

FROM golang:1.24-bullseye

LABEL maintainer="poi"
LABEL version="0.1-dev"

# 1. Install system dependencies & Set locale
# Same as production Dockerfile to ensure consistency
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    curl \
    gnupg \
    locales \
    lsb-release \
    sudo \
    && rm -rf /var/lib/apt/lists/*

RUN echo "en_US.UTF-8 UTF-8" > /etc/locale.gen && \
    locale-gen en_US.UTF-8 && \
    update-locale LANG=en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en
ENV LC_ALL en_US.UTF-8

# 2. Install PostgreSQL 15
RUN curl -s https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor | tee /etc/apt/trusted.gpg.d/postgresql.gpg >/dev/null && \
    echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list && \
    apt-get update && \
    apt-get install -y --no-install-recommends postgresql-15 && \
    rm -rf /var/lib/apt/lists/*

# PostgreSQL 데이터 디렉토리 초기화
RUN rm -rf /var/lib/postgresql/15/main/* && \
    mkdir -p /var/lib/postgresql/15/main && \
    chown -R postgres:postgres /var/lib/postgresql/15/main && \
    sudo -u postgres /usr/lib/postgresql/15/bin/initdb -D /var/lib/postgresql/15/main --encoding=UTF8 --locale=en_US.UTF-8

# 3. Install TimescaleDB
RUN mkdir -p /etc/apt/keyrings && \
    curl -fsSL https://packagecloud.io/timescale/timescaledb/gpgkey | gpg --dearmor -o /etc/apt/keyrings/timescaledb.gpg && \
    echo "deb [signed-by=/etc/apt/keyrings/timescaledb.gpg] https://packagecloud.io/timescale/timescaledb/debian/ $(lsb_release -cs) main" > /etc/apt/sources.list.d/timescaledb.list && \
    apt-get update && \
    apt-get install -y --no-install-recommends timescaledb-2-postgresql-15 && \
    rm -rf /var/lib/apt/lists/*

# 4. Install NATS Server
RUN curl -L https://github.com/nats-io/nats-server/releases/download/v2.10.21/nats-server-v2.10.21-linux-amd64.tar.gz | tar -xz && \
    mv nats-server-v2.10.21-linux-amd64/nats-server /usr/local/bin/

# 5. Install SeaweedFS
RUN curl -L https://github.com/seaweedfs/seaweedfs/releases/download/3.68/linux_amd64.tar.gz | tar -xz && \
    mv weed /usr/local/bin/

# 6. Install development tools for Go (air for live-reloading)
RUN go install github.com/air-verse/air@latest

# 7. Create non-root user for security
RUN adduser --system --group appuser && \
    echo "appuser ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

WORKDIR /app

# 8. Copy Go module files to leverage Docker cache
COPY go.mod go.sum ./
RUN go mod download

# 9. Create data directories and set permissions
RUN mkdir -p /data/seaweedfs /data/nats /var/run/postgresql && \
    chown -R appuser:appuser /app /data && \
    chown -R postgres:postgres /var/lib/postgresql /var/run/postgresql

USER appuser

# The source code will be mounted as a volume in docker-compose.
# The supervisor will manage all processes internally.
# In development mode, we run the supervisor directly (not with Air)
CMD ["go", "run", "./cmd/supervisor"] 